(*
Antirandoms
===========

The 'master' SRL randoms file.  The 4 "core" functions (solverandoms,
FindAllrandoms, FindNormalRandoms, and FindNonInventoryRandoms) shouldn't ever
need to be updated if a new random event is added to the game, or a current one
is removed.  For a description of how each solver works, see the top of that
solver's simba file.

*)

// include all the solver files
{$include_once common.simba}
{$include_once rewards.simba}
{$include_once demon.simba}
{$include_once maze.simba}
{$include_once evilbob.simba}
{$include_once mordaut.simba}
{$include_once certers.simba}
{$include_once mime.simba}
{$include_once abyss.simba}
{$include_once frog.simba}
{$include_once pinball.simba}
{$include_once sandwich.simba}
{$include_once pillory.simba}
{$include_once capnarnav.simba}
{$include_once quiz.simba}
{$include_once leo.simba}
{$include_once prisonpete.simba}
{$include_once forester.simba}
{$include_once molly.simba}
{$include_once beekeeper.simba}

// represent the elements of the SRL_Randoms array
const
  SRL_RANDOMS_COUNT = 19;
  SRL_RAND_DEMON     = 0;
  SRL_RAND_MAZE      = 1;
  SRL_RAND_EVILBOB   = 2;
  SRL_RAND_MORDAUT   = 3;
  SRL_RAND_CERTERS   = 4;
  SRL_RAND_MIME      = 5;
  SRL_RAND_ABYSS     = 6;
  SRL_RAND_FROG      = 7;
  SRL_RAND_PINBALL   = 8;
  SRL_RAND_SANDWICH  = 9;
  SRL_RAND_PILLORY   = 10;
  SRL_RAND_ARNAV     = 11;
  SRL_RAND_QUIZ      = 12;
  SRL_RAND_LEO       = 13;
  SRL_RAND_PETE      = 14;
  SRL_RAND_FORESTER  = 15;
  SRL_RAND_BEEKEEPER = 16;
  SRL_RAND_MOLLY     = 17;
  SRL_RAND_REWARDS   = 18;

type
  TRandom = record
    name: string;
    solve, detect: function(): boolean;
    solved, failed: integer; // for SRL stats/randoms report
    isInvRandom, hasRewardBox, disabled: boolean;
  end;

var
  SRL_Randoms: array[0..(SRL_RANDOMS_COUNT - 1)] of TRandom;
  SRL_RandomsSet, SRL_DisableRandoms, SRL_RandomScreenShot: boolean;

// needs to be included after variables are declared
{$include_once randomtool.simba}

(*
SRLRandomsReport
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function SRLRandomsReport(): boolean;

Prints a random events progress report for the current script.

.. note::

    Author: Coh3n
    Last Modified: Jan. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    SRLRandomsReport();
*)
procedure SRLRandomsReport();
var
  i: integer;
begin
  writeln('|====================================|');
  writeln('|              ~ SRL ~               |');
  writeln('|           Randoms Report           |');
  writeln('|────────────────────────────────────|');
  writeln('|                                    |');

  for i := 0 to high(SRL_Randoms) do
  begin
    if (SRL_Randoms[i].name = '') then
      continue;

    if (SRL_Randoms[i].solved > 0) then
      writeln('|    '+padR(SRL_Randoms[i].name
        +' Solved', 22)+' ~ '+padR(toStr(SRL_Randoms[i].solved), 7)+'|');

    if (SRL_Randoms[i].failed > 0) then
      writeln('|    '+padR(SRL_Randoms[i].name
        +' Failed', 22)+' ~ '+padR(toStr(SRL_Randoms[i].failed), 7)+'|');
  end;

  writeln('|                                    |');
  writeln('|────────────────────────────────────|');
  writeln('|====================================|');
end;

(**
 * Author: Coh3n
 * Description: Sets the SRL_Randoms global array.
 *)
procedure _SetRandoms();
var
  i: integer;
begin
  if (SRL_RandomsSet) then
    exit;

  with SRL_Randoms[SRL_RAND_DEMON] do
  begin
    name := 'Drill Demon';
    solve := @DD_Solve;
    detect := @DD_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_MAZE] do
  begin
    name := 'Maze';
    solve := @Maze_Solve;
    detect := @Maze_Detect;
    isInvRandom := false;
    hasRewardBox := false;
  end;

  with SRL_Randoms[SRL_RAND_EVILBOB] do
  begin
    name := 'Evil Bob';
    solve := @EB_Solve;
    detect := @EB_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_MORDAUT] do
  begin
    name := 'Mordaut';
    solve := @MD_Solve;
    detect := @MD_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_CERTERS] do
  begin
    name := 'Certers';
    solve := @CT_Solve;
    detect := @CT_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_MIME] do
  begin
    name := 'Mime';
    solve := @Mime_Solve;
    detect := @Mime_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_ABYSS] do
  begin
    name := 'Abyss';
    solve := @Abyss_Solve;
    detect := @Abyss_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_FROG] do
  begin
    name := 'Frog';
    solve := @Frog_Solve;
    detect := @Frog_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_PINBALL] do
  begin
    name := 'Pinball';
    solve := @PB_Solve;
    detect := @PB_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_SANDWICH] do
  begin
    name := 'Sandwich Lady';
    solve := @SL_Solve;
    detect := @SL_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_PILLORY] do
  begin
    name := 'Pillory (Cage)';
    solve := @PL_Solve;
    detect := @PL_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_ARNAV] do
  begin
    name := 'Cap''n Arnav';
    solve := @CA_Solve;
    detect := @CA_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_QUIZ] do
  begin
    name := 'Quiz Master';
    solve := @Quiz_Solve;
    detect := @Quiz_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_LEO] do
  begin
    name := 'Leo';
    solve := @Leo_Solve;
    detect := @Leo_Detect;
    isInvRandom := false;
    hasRewardBox := true;
    disabled := true;
  end;

  with SRL_Randoms[SRL_RAND_PETE] do
  begin
    name := 'Prison Pete';
    solve := @PP_Solve;
    detect := @PP_Detect;
    isInvRandom := false;
    hasRewardBox := true;
    disabled := true;
  end;

  with SRL_Randoms[SRL_RAND_FORESTER] do
  begin
    name := 'Freaky Forester';
    solve := @FF_Solve;
    detect := @FF_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_BEEKEEPER] do
  begin
    name := 'Beekeeper';
    solve := @BK_Solve;
    detect := @BK_Detect;
    isInvRandom := false;
    hasRewardBox := true;
  end;

  with SRL_Randoms[SRL_RAND_MOLLY] do
  begin
    name := 'Molly';
    solve := @Molly_Solve;
    detect := @Molly_Detect;
    isInvRandom := false;
    hasRewardBox := true;
    disabled := false;
  end;

  with SRL_Randoms[SRL_RAND_REWARDS] do
  begin
    name := 'Rewards';
    solve := @RD_Solve;
    detect := @RD_Detect;
    isInvRandom := true;
    hasRewardBox := true;
  end;

  // disable all randoms if set to
  if (SRL_DisableRandoms) then
  begin
    addToSRLLog('**** WARNING: Disabling random event solvers');

    for i := 0 to high(SRL_Randoms) do
      SRL_Randoms[i].disabled := true;
  end;

  SRL_RandomsSet := true;
end;

(**
 * Author: Coh3n
 * Description: Detects and solves the random of index 'rand' in the SRL_Randoms
 * array.  Returns true if a random is found, not necessarily if it is solved.
 * Manually returns true if the random was solved by hand using SRL's Random
 * tool.
 *)
function _SolveRandom(rand: integer; var manually: boolean): boolean;
var
  solved: boolean;
  oldCompass: extended;
begin
  if (not loggedIn) then
    exit;

  if ({$IFDEF Lape}@{$ENDIF}SRL_Randoms[rand].detect <> nil) and (SRL_Randoms[rand].detect()) then
  begin
    addToSRLLog('***** Found Random: '+SRL_Randoms[rand].name+' *****');
    players[currentPlayer].rand := SRL_Randoms[rand].name;
    result := true;

    if SRL_HasProc(SRL_OnFindRandom) then
      SRL_Procs[SRL_OnFindRandom]();

    // see if the script is using SRL's random tool
    if (RT_UseRandomTool) then
      if (RT_Execute()) then
      begin
        addToSRLLog('***** Solved Random Manually: '+SRL_Randoms[rand].name+' *****');
        manually := true;
        exit;
      end;

    // only take a screenshot if needed
    if ((SRL_RandomScreenShot) and (not SRL_Randoms[rand].isInvRandom)) then
      takeScreen(SRL_Randoms[rand].name);

    // sometimes it gets in the way of objects we need to find
    toggleMoneyPouch(false);
    exitSquealOfFortune();

    // if solver isn't disabled, solve it
    if (not SRL_Randoms[rand].disabled) then
    begin
      oldCompass := rs_GetCompassAngleDegrees();

      if ({$IFDEF Lape}@{$ENDIF}SRL_Randoms[rand].solve <> nil) and (SRL_Randoms[rand].solve()) then
      begin
        addToSRLLog('***** Solved Random: '+SRL_Randoms[rand].name+' *****');
        players[currentPlayer].rand := '';
        inc(SRL_Randoms[rand].solved);
        solved := true;
      end;

      makeCompass(oldCompass); // restore the compass to its original angle

    end else
      addToSRLLog(SRL_Randoms[rand].name+' solver currently disabled');

    if (not solved) then
    begin
      addToSRLLog('***** Failed Random: '+SRL_Randoms[rand].name+' *****');

      // solver didn't fail, it's disabled
      if (not SRL_Randoms[rand].disabled) then
        inc(SRL_Randoms[rand].failed);

      // set player to false and logout if the solver failed or is disabled
      players[currentPlayer].active := false;
      result := false;
      logout();
    end;
  end;
end;

(**
 * Author: Coh3n
 * Description: Finds and solves all the randoms.  Checks inventory if checkInv
 * is set to true. This function should only be called in FindNormalRandoms and
 * FindNonInventoryRandoms.
 *)
function _Callback_SolveRandom: Boolean;
var
  b: Boolean;
begin
  Result := _SolveRandom(SRL_RAND_REWARDS, b);
end;
 
function _FindAllRandoms(checkInv: boolean): boolean;
var
  i: integer;
  manually: boolean;
begin
  // no tabs exists if bank is open; could throw false positives
  if (not loggedIn()) or (bankScreen()) then
    exit;

  if (not SRL_RandomsSet) then
    _SetRandoms();

  // handle the GE update message
  if (findNPCChatText('exchan', nothing)) then
    clickContinue(true, true);

  for i := 0 to high(SRL_Randoms) do
  begin
    if ((SRL_Randoms[i].isInvRandom) and (not checkInv)) then
      continue;

    if (_SolveRandom(i, manually)) then
    begin
      // if the random was solved by hand, break out of the loop
      if (manually) then
      begin
        result := true;
        break;
      end;

      // solve reward box if a non inventory random was just solved
      if (loggedIn()) then // if solver failed, player would be logged out
        if (not SRL_Randoms[i].isInvRandom) then
        begin
          // reward box doesn't exist if inventory is full/some randoms don't have reward box
          result := (invFull() or (not SRL_Randoms[i].hasRewardBox));

          if (not result) then
          begin
            if (waitFunc(@_Callback_SolveRandom, 50, 5000)) then
              _SolveRandom(SRL_RAND_REWARDS, manually); // check if we chose another reward
          end;
        end;

      result := true;
    end;

    // don't want to keep looking for randoms if one was already detected, but failed
    if ((result) or (not loggedIn())) then
      break;
  end;

  findDead();
  findMod();
  findDwarvenPopup();
  exitSquealOfFortune();
  closeAdWindow();
  if checkInv then
    findSpinTicket();

  if SRL_HasProc(SRL_OnRandomCall) then
    SRL_Procs[SRL_OnRandomCall]();
end;

(*
FindNormalRandoms
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindNormalRandoms(): boolean;

Finds and solves Runescape's random events.  Returns true if an event was
solved.

.. note::

    Author: Coh3n
    Last Modified: Jan. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    FindNormalRandoms();
*)
function FindNormalRandoms(): boolean;
begin
  result := _FindAllrandoms(true);
end;

(*
FindNonInventoryRandoms
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function FindNonInventoryRandoms(): boolean;

Finds and solves all Runescape's non inventory random events (i.e. the ones that
teleport the player somewhere else).  Returns true if an event was solved.

.. note::

    Author: Coh3n
    Last Modified: Jan. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    FindNonInventoryRandoms();
*)
function FindNonInventoryRandoms(): boolean;
begin
  result := _FindAllRandoms(false);
end;
