(*
Minimap
=======

The Minimap include contains all igeneral Minimap related functions

.. contents::

*)

(*
rs_GetCompassAngleRadians
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function rs_GetCompassAngleRadians: Extended;

Returns the compass angle in radians.

.. note::

    by Narcle & Flight

Example:

.. code-block:: pascal

*)
Function rs_GetCompassAngleRadians: Extended;
var
  TPA: TPointArray;
  T: TPoint;
  B: TBox;
begin
  B := IntToBox(524, 5, 562, 43);
  with B do
    FindColorsSpiralTolerance(T.x, T.y, TPA, 65536, x1, y1, x2, y2, 0);
  if Length(TPA) < 1 then
   Exit;
  T := MiddleTPA(TPA);
  Result := ArcTan2(-(T.Y - 24), T.X - 543) + Radians(90);
  Result := fixRad(Result - Pi);
end;

(*
rs_GetCompassAngleDegrees
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function rs_GetCompassAngleDegrees: Extended;

Returns the compass angle in degrees.

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)
function rs_GetCompassAngleDegrees: Extended;
begin
  Result := Degrees(rs_GetCompassAngleRadians());
end;


(*
rs_OnMinimap
~~~~~~~~~~~~

.. code-block:: pascal

    function rs_OnMinimap(x, y: Integer): Boolean;

Checks wether the specified point is on the minimap.

.. note::

    by Raymond

Example:

.. code-block:: pascal

*)
function rs_OnMinimap(x, y: Integer): Boolean;
begin
  Result := InCircle(x, y, MMCX, MMCY, 75);
end;

(*
FindFlag
~~~~~~~~

.. code-block:: pascal

    function FindFlag(var X, Y: Integer): Boolean;

Returns true if the flag is found on the minimap.

.. note::

    by Narcle

Example:

.. code-block:: pascal

  if (FindFlag(x, y)) then
  begin
    writeln('Flag found');
    mouse(x, y, 3, 3, true);
  end;
*)
Function FindFlag(var X, Y: integer): Boolean;
begin
  Result := False;
  if FindBitmapToleranceIn(bmpFlag, X, Y, MMX1, MMY1, MMX2, MMY2, 75) then
  begin
    Result := True;
    X := X+7;
    Y := Y+14;
   end;
end;

(*
FindFlag2
~~~~~~~~

.. code-block:: pascal

    function FindFlag2(var X, Y: Integer): Boolean;

Returns true if the flag is found on the minimap.

.. note::

    by Home

Example:

.. code-block:: pascal

  if (FindFlag2(x, y)) then
  begin
    writeln('Flag found');
    mouse(x, y, 3, 3, true);
  end;
*)
function FindFlag2(var X, Y: Integer): Boolean;
var
  KMTarget, ITarget, I, Hi, Map, W, H, t: Integer;
  TPA: TPointArray;
begin
  Result := False;
  Map := BitmapFromString(MMX2 - MMX1, MMY2 - MMY1, '');
  CopyClientToBitmap(Map, MMX1, MMY1, MMX2, MMY2);
  KMTarget := GetKeyMouseTarget;
  ITarget := GetImageTarget;
  SetTargetBitmap(Map);
  GetBitmapSize(Map, W, H);
  FindColors(TPA, 65536, 0, 0, W - 1, H -1);
  FilterPointsDist(TPA, 0, 75.5, W div 2, H div 2);
  Hi := Length(TPA);
  for I := 0 to Hi - 1 do
    if ((FastGetPixel(Map, TPA[I].X - 1, TPA[I].Y - 1) - FastGetPixel(Map, TPA[I].X, TPA[I].Y - 1)) = 6381921) then
    begin
      Result := True;
      X := TPA[I].X + MMX1;
      Y := TPA[I].Y + MMY1;
      Break;
    end;

  t := GetImageTarget;
  SetKeyMouseTarget(KMTarget);
  SetImageTarget(ITarget);
  FreeTarget(t);
  FreeBitmap(Map);
end;
(*
FlagPresent
~~~~~~~~~~~

.. code-block:: pascal

    function FlagPresent: Boolean;

T/F depending on flag exist.


.. note::

    by weequ

Example:

.. code-block:: pascal


*)
function FlagPresent: Boolean;
var
  X, Y: Integer;
begin
  Result := FindFlag(X, Y) or FindFlag2(X, Y);
end;

(*
FlagDistance
~~~~~~~~~~~~

.. code-block:: pascal

    function FlagDistance: Integer;

Returns distance in pixels your char dot is from flag on mini-map


.. note::

    by weequ

Example:

.. code-block:: pascal


*)
function FlagDistance: Integer;
var
  X, Y: Integer;
begin
  Result := -1;
  if (FindFlag(X, Y)) or (FindFlag2(X, Y)) then
    Result := Distance(MMCX, MMCY, X, Y);
end;

(*
WalkingToFlag
~~~~~~~~~~~~~

.. code-block:: pascal

    function WalkingToFlag(WaitTime: Integer): Boolean;

Checks if your charachter is moving; stores current FlagDistance to a variable,
waits "WaitTime" ms and then checks the FlagDistance again.
If it differs from the Distance stored in the variable, function returns true.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal


*)
function WalkingToFlag(WaitTime: Integer): Boolean;
var
  FirstDistance: Integer;
begin
  Result := False;
  if (not FlagPresent) then exit;
  FirstDistance := FlagDistance;
  Wait(WaitTime);
  Result := (FirstDistance <> FlagDistance);
end;

function RoadColorChecker: Boolean; Forward;

(*
FlagEx
~~~~~~

.. code-block:: pascal

    function FlagEx(Dist: Integer; RoadColorCheck: Boolean): Boolean;

Waits until Flag is within "Distance" distance.

.. note::

    by Wizzup? / WT-Fakawi / ZephyrsFury / N1ke! / weequ

Example:

.. code-block:: pascal


*)
function FlagEx(Dist: Integer; RoadColorCheck: Boolean): Boolean;
var
  Tx, Ty, M, D1, D2: Integer;
begin
  Wait(randomRange(400, 600));
  Result := False;
  M := GetSystemTime;
  repeat
    if (not FindFlag(Tx, Ty)) and (not FindFlag2(Tx, Ty)) then
    begin
      Result := true;
      Exit;
    end;
    D1 := Distance(Tx, Ty, MMCX, MMCY);
    if (D1 <= Dist) then
    begin
      Result := True;
      Exit;
    end;
    if (D1 > Dist+12) then
      wait(450+random(70))
    else
      wait(50+random(50));
    if (RoadColorCheck) then
      RoadColorChecker;
    if (GetColor(6, 6) <> 13092807) then // border of the loading message
      if (GetSystemTime - M > 5000) then
      begin
        if (D1 = D2) then Exit;
        D2 := D1;
        M := GetSystemTime;
      end;
    if SRL_HasProc(SRL_AntiBan) then
      SRL_Procs[SRL_AntiBan]();
  until not LoggedIn;
end;

(*
MouseFlagEx
~~~~~~~~~~~

.. code-block:: pascal

    function MouseFlagEx(X, Y, rX, rY, Xmod, Ymod, FlagDist: Integer; CheckForFlag, CheckForRoadColor: Boolean): Boolean;

MouseFlag, MFF & MFNF combined into one procedure.
X, Y is the point you want to click, rX, rY are randomness modifiers.
Xmod and Ymod is the adjustment for each click without finding a flag.
FlagDist is how close you want to be (in pixels) to the flag before exiting.
CheckForFlag = True if you want to exit the function if a flag is present. (MFF)
CheckForRoadColor = True if you want to call RoadColorChecked while FlagPresent.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal


*)
function MouseFlagEx(X, Y, rX, rY, Xmod, Ymod, FlagDist: Integer;
  CheckForFlag, CheckForRoadColor: Boolean): Boolean;
var
  I: Integer;
  P: TPoint;
begin
  Result := False;
  if (FlagPresent) then
    if (CheckForFlag) or (FlagDistance <= FlagDist) then exit;

  P := Point(X - Xmod, Y - Ymod);
  Xmod := Max(Xmod, 3);
  Ymod := Max(Ymod, 3);

  for I := 0 to 4 do
  begin
    IncEx(P.X, Xmod + Random(rX));
    IncEx(P.Y, Ymod + Random(rY));
    if not rs_OnMiniMap(P.X, P.Y) then Continue;
    Mouse(P.X, P.Y, 0, 0, mouse_left);
    Result := WaitFunc(@FlagPresent, 50, 3000);
    if (Result) then break;
  end;
  if (FlagDist > -1) then
    FlagEx(FlagDist, CheckForRoadColor);
end;

(*
MFF
~~~

.. code-block:: pascal

    function MFF(X, Y, Xmod, Ymod: Integer): Boolean;


If the flag is not present it will click at (ax, ay) increasing by
(xmod, ymod) 5 times or until the flag appears.


.. note::

    by EvilChicken! from an original idea by WT-Fakawi

Example:

.. code-block:: pascal


*)
function MFF(X, Y, Xmod, Ymod: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, 3, 3, Xmod, Ymod, -1, True, False);
end;

(*
MFNF
~~~~

.. code-block:: pascal

    Function MFNF(ax, ay, xmod, ymod: Integer):Boolean;

Like MFF except it will click even if the flag is present when the

.. note::

    by EvilChicken! from an original idea by WT-Fakawi

Example:

.. code-block:: pascal


*)
function MFNF(X, Y, Xmod, Ymod: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, 3, 3, Xmod, Ymod, -1, False, False);
end;

(*
FFlag
~~~~~

.. code-block:: pascal

    function FFlag(Dist: Integer): Boolean;

Waits until Flag is within "Distance" distance.


.. note::

    by Wizzup? / WT-Fakawi / ZephyrsFury

Example:

.. code-block:: pascal


*)
function FFlag(Dist: Integer): Boolean;
begin
  Result := FlagEx(Dist, False);
end;

(*
Flag
~~~~

.. code-block:: pascal

    function Flag: Boolean;

Waits while flag exists.


.. note::

    by Nava2

Example:

.. code-block:: pascal


*)

function Flag: Boolean;
begin
  Result := FlagEx(0, False);
end;

(*
MouseFlag
~~~~~~~~~

.. code-block:: pascal

    procedure MouseFlag(X, Y, rX, rY, FlagDist: Integer);

Mouse and Flag combined into one easy procedure.


.. note::

    by EvilChicken!

Example:

.. code-block:: pascal


*)

function MouseFlag(X, Y, rX, rY, FlagDist: Integer): Boolean;
begin
  Result := MouseFlagEx(X, Y, rX, rY, 0, 0, FlagDist, False, False);
end;
