(*
Mapwalk
=======

The Mapwalk include contains all Mapwalking functions

*)

// TODO: Update to Doc style?
{*******************************************************************************
var RoadColors: TIntegerArray;
Description: Global record containing all roadcolors collected during runtime.
*******************************************************************************}
var
  RoadColors: TIntegerArray;

{*
variantDirection
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function variantToDirection(dir: Variant): Extended;

Converts a variant to a direction, catching errors and attempts to fix. This
function expects "compass relative" angles. For example: ('n', 's', 'e', 'w') or
degree (23.3, 25, 205.2) or 'random' (returns 0..360).

.. note::

    by Nava2

Example:

.. code-block:: pascal

    dir := variantToDirection('n');     // -> 0.0
    dir := variantToDirection('rand');  // -> in range 0..360
    dir := variantToDirection(50);      // -> 50

*}
function variantToDirection(dir: Variant): Extended;
var
  e: Extended;
begin
  if VariantIsNumber(dir) then
    Result := FixD(dir + 0.0)
  else if VariantIsString(dir) then
    case LowerCase(dir) of
      'n': Result := 0;
      'e': Result := 90;
      's': Result := 180;
      'w': Result := 270;
      'random', 'rand': Result := RandomRange(0, 360);
      else
      begin
        e := StrToFloatDef(dir, -1337);
        if (e <> -1337) then
          Result := FixD(e)
        else
        begin
          srl_Warn('variantToDirection',
            'dir [' + toStr(dir) +'] invalid. Returned 0.0 for safety',
          warn_AllVersions);
          Result := 0.0;
        end;
      end;
    end;
end;

(*
MakeCompass
~~~~~~~~~~~

.. code-block:: pascal

    function MakeCompass(Direction: Variant): Boolean;

Aligns RS to specified direction
   - Enter a compass angle ('n', 's', 'e', 'w') or degree (23.3, 25, 205.2)
      and it will move the compass to that angle. Also accepts 'random',
      and 'rand' to make the compass a random direction.

.. note::

    by Nielsie95 & Nava2

Example:

.. code-block:: pascal

    // using a string!
    MakeCompass('N');

    // using an integer!
    MakeCompass(0);

*)

// Helper function for MakeCompass to clean up code
// Compares Angle and DirectionDeg to see how far away it is
function __MakeCompass_MinCheck(Angle, DirectionDeg: Extended): Extended;
begin
  // TODO: Check if FixD could be used to remove some cases..
  Result := MinE(Abs(Angle - (DirectionDeg + 360)), Abs((Angle + 360) - DirectionDeg));
  Result := MinE(Abs(Angle - DirectionDeg), Result);
end;

function MakeCompass(Direction: Variant): Boolean;
var
  StartAngle, Angle, DirectionDeg, i: Extended;
  Left: Boolean;
  Mark: Integer;
begin
  Result := False;
  StartAngle := (rs_GetCompassAngleDegrees);
  if ((StartAngle < 0) or (not LoggedIn)) then Exit;

  // convert from variant to direction:
  DirectionDeg := variantToDirection(Direction);

  if (__MakeCompass_MinCheck(StartAngle, DirectionDeg) <= 8.0) then
  begin
    Result := True;
    Exit;
  end;
  Left := (Round((360 - StartAngle) + DirectionDeg) mod 360 <= Round((StartAngle + 360) - DirectionDeg) mod 360);
  KeyDown((Ord(not Left) * 2) + 37);
  Wait(10);
  MarkTime(Mark);
  i := 0.0;
  repeat
    Wait(16);
    Angle:= rs_GetCompassAngleDegrees;
    if (((TimeFromMark(Mark) > 6000)  and (i < 1.0)) or
        ((TimeFromMark(Mark) > 10000) and (i < 2.0)) or
        ((TimeFromMark(Mark) > 14000) and (i < 3.0))) then
    begin
      i := i + 1.0;
    end;
   // TODO: simplify the maths?
  until ((Angle < 0) or
    (TimeFromMark(Mark) > 14000) or
    (__MakeCompass_MinCheck(Angle, DirectionDeg) <= (7.0 + i)));
  if Left then
    KeyUp(VK_Left)
  else
    KeyUp(VK_Right);
  Wait(10);
  Result := (__MakeCompass_MinCheck(Angle, DirectionDeg) <= (7.0 + i));
end;

(*
SetAngle
~~~~~~~~

.. code-block:: pascal

    procedure SetAngle(Angle: Integer);

Sets the mainscreen at highest\lowest angle, dependant on constant passed.

.. note::

    by Raymond, edit by NaumanAkhlaQ

Example:

.. code-block:: pascal

    // make the camera the highest!
    SetAngle(True);

*)

// TODO: fix doc for this.
// Allows one to use ClickNorth without waiting 1s every time.
const
  SRL_ANGLE_HIGH  = 0;
  SRL_ANGLE_LOW   = 1;
  SRL_ANGLE_NONE  = 2;

// TODO: Check if 1000ms wait is necessary
procedure SetAngle(Angle: Integer);
begin
  if ((Angle = SRL_ANGLE_NONE) or (not LoggedIn)) then
    Exit;

  KeyDown((Angle * 2) + 38);
  Sleep(1000 + Random(300));
  KeyUp((Angle * 2) + 38);
  Wait(500 + Random(100));
end;

(*
ClickNorth
~~~~~~~~~~

.. code-block:: pascal

    procedure ClickNorth(AngleHigh: Integer);

Clicks the compass to make it perfect North. Will set angle at highest depending
on AngleHigh. See `SetAngle` for more information on the Angle parameter.

.. note::

    by R1ch

Example:

.. code-block:: pascal

    procedure MapWalk();
    begin
      ClickNorth(SRL_ANGLE_NONE);
      //...

*)
procedure ClickNorth(AngleHigh: Integer);
begin
  if (Random(4) = 1) then
  begin
    Mouse(542, 24, 15, 15, mouse_right);
    WaitOptionMulti(['ace', 'orth'], 1200);
  end else
    Mouse(542, 24, 15, 15, mouse_left);

  SetAngle(AngleHigh);
end;

{$DEFINE WALL_ANGLELEFT}

(*
GetWallAngle
~~~~~~~~~~~~

.. code-block:: pascal

    Function GetWallAngle(Ps: TPointArray): Extended;

Get's the Minimap angle using Walls. Returns Angle in Radians.
Used in Maze.scar, but feel free to use for Perfect map aligning projects.

.. note::

    by Wizzup?

Example:

.. code-block:: pascal



*)
// TODO: Code example in docs
function GetWallAngle(Ps: TPointArray): Extended;
var
   L, I, C: Integer;
   ATPA, gATPA: T2DPointArray;
   P, P2: TPoint;
   B: TBox;
begin
  Result := -1.0;
  if High(Ps) = -1 then
    Exit;
  SortTPAFrom(Ps, Point((550 + 703) div 2, 0));  // Sort it from the center.
  {$IFDEF WALL_ANGLELEFT}
  ATPA := SplitTPAEx(Ps, 0, 1);   // This turns a PointArray into
                                  // vertical lines
  {$ELSE}
  ATPA := SplitTPAEx(Ps, 1, 0); //horizontal lines
  {$ENDIF}

  SortATPASize(ATPA, True);     // longest 'line'.
  L := High(aTPA);
  if L = -1 then
    Exit;

  SetLength(gATPA, L + 1);
  C := 1;
  gATPA[0] := aTPA[0];
  P := MiddleTPA(aTPA[0]);        // get middle of the line.

  for I := 1 to L do
  begin // this loops adds any points that are in a dist of 10 pixels.
        // if vert, then x, hori then y (A wall isn't straight.)
    if Length(aTPA[I]) < 4 then
      Continue;
    P2 := MiddleTPA(aTPA[I]);
    {$IFDEF WALL_ANGLELEFT}
    if (Abs(P.X - P2.X) < 10) then
    {$ELSE}
    if (Abs(P.Y - P2.Y) < 10) then
    {$ENDIF}
    begin
      gATPA[C] := aTPA[I];
      C := C + 1;
    end;
  end;
  SetLength(gATPA, C);
  SetLength(Ps, 0);

  Ps := MergeATPA(gATPA);   //Combine all the points. within 10pix
  B := GetTPABounds(Ps);
  SortTPAFrom(Ps, Point((B.X1 + B.X2) div 2, 0));   // sort from center

  SetLength(ATPA, 0);
  ATPA := SplitTPA(Ps, 3);  // split dist three, the left over walls
                            // were all in Ps, and now we split them again.

  SetLength(Ps, 0);
  SortATPASize(ATPA, True);   // longest wall.

  Ps := ATPA[0];
  L := High(Ps);   //angle getting
  Result := ArcTan2(Ps[L].Y -Ps[0].Y, Ps[L].X - Ps[0].X) - (Pi * 0.5);
  {$IFDEF WALL_ANGLELEFT} {$ELSE} Result := Result + 0.5 * Pi {$ENDIF}
end;

(*
RunAway
~~~~~~~

.. code-block:: pascal

    procedure RunAway(dir: string; RunFar: Boolean; Action, WaitTime: Integer);

- Runs away in minimap related direction, based on north.
- Dir can be 'N', 'E', 'S', 'W' or an angle in degrees (145, 93, 180, etc).
- RunFar will run further than normal.
- Action can be either 1, 2 or 3:

    1. RunAway + Wait(WaitTime) + RunBack
    2. RunAway + Wait(WaitTime)
    3. RunBack

.. note::
    WaitTime is in milliseconds!

.. note::

    by nielsie95 modified by ZephyrsFury

Example:

.. code-block:: pascal

    if (FindFight()) then
    begin
      WriteLn('We are in a fight!');
      RunAway('n', True, 1, 2000);
    end;

*)

// TODO: Implement constants!
procedure RunAway(dir: variant; RunFar: Boolean; Action, WaitTime: Integer);
var
  Rad, T: Integer;
  Deg: extended;
begin
  if (not LoggedIn) then exit;

  if RunFar then
    Rad := 63
  else
    Rad := 30;
  Deg := variantToDirection(dir);

  if (Action < 3) then
  begin
    SetRun(True);
    MFNF(Trunc(Rad * Sin(Radians(FixD(Rs_GetCompassAngleDegrees + Deg))) + MMCX + Random(5)),
      Trunc(-Rad * Cos(Radians(FixD(Rs_GetCompassAngleDegrees + Deg))) + MMCY + Random(5)), 1, 1);
    FFlag(0);
    Wait(500 + Random(1500));
    t := GetSystemTime;
    while ((GetSystemTime - t) < WaitTime) and (LoggedIn) do
      if (Random(5) = 0) then
        IdleTime(2000, 500, 1.0)
      else
        Wait((WaitTime - (GetSystemTime - t)) div 5);
  end;

  if (Action = 1) or (Action = 3) then
  begin
    MFNF(Trunc(Rad * Sin(Radians(FixD(Rs_GetCompassAngleDegrees + (Deg + 180)))) + MMCX - Random(5)),
      Trunc(-Rad * Cos(Radians(FixD(Rs_GetCompassAngleDegrees + (Deg + 180)))) + MMCY - Random(5)), 1, 1);
    FFlag(0);
    Wait(500 + Random(1500));
  end;

  SetRun(False);
end;

(*
StoreToRoadColorArray
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure StoreToRoadColorArray;

Stores RoadColor to an array. Debugging and logging purposes.

.. note::

    by Wizzup? / WT-Fakawi, rewritten by EvilChicken!

Example:

.. code-block:: pascal


*)

// TODO: Depreciated?
procedure StoreToRoadColorArray;
var
  Hi: Integer;
begin
  if (InIntArray(RoadColors, RoadColor)) then exit;
  Hi := High(RoadColors);
  SetLength(RoadColors, Hi + 2);
  RoadColors[Hi + 1] := RoadColor;
end;

(*
GetOldRoadColors
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function GetOldRoadColors: Boolean;

Checks if RoadColor matches with any color stored in RoadColors array.
If successful, it sets the roadcolor.

.. note::

    by Wizzup? / WT-Fakawi, edited by EvilChicken!

Example:

.. code-block:: pascal


*)

// TODO: Depreciated?
function GetOldRoadColors: Boolean;
var
  I, X, Y, Hi: Integer;
begin
  Result := False;
  Hi := High(RoadColors);
  for I := 0 to Hi do
    if FindColorTolerance(X, Y, RoadColors[I], MMX1, MMY1, MMX2, MMY2, 10) then
    begin
      RoadColor := GetColor(X, Y);
      if (not InIntArray(RoadColors, RoadColor)) then
      begin
        SetLength(RoadColors, Hi + 2);
        RoadColors[Hi + 1] := RoadColor;
      end;
      srl_Warn('GetOldRoadColors', 'Set RoadColor through RoadColors array.', warn_Debug);
      Result := True;
      Exit;
    end;
end;

(*
GetNewRoadColor
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function GetNewRoadColor(xs, ys, xe, ye, tol: Integer): Boolean;

Searches for new RoadColor in box xs, ys, xe, ye by comparing all the colors found within box against current RoadColor.

.. note::

    by Wizzup?/WT-Fakawi, edited by Ron & EvilChicken!

Example:

.. code-block:: pascal


*)

// TODO: Depreciated?
function GetNewRoadColor(xs, ys, xe, ye, Tol: Integer): Boolean;
var
  X, Y, W, H, Bmp: Integer;
  TC: TColor;

begin
  if (not LoggedIn) then exit;
  if (XS > XE) then
  begin
    srl_Warn('GetNewRoadColor', 'Seachbox coordinates error - XS:' + IntToStr(XS) +
      ', XE: ' + IntToStr(XE), warn_Warning);
    Exit;
  end;
  if (YS > YE) then
  begin
    srl_Warn('GetNewRoadColor', 'Seachbox coordinates error - YS:' + IntToStr(YS) +
      ', YE: ' + IntToStr(YE), warn_Warning);
    Exit;
  end;
  
  w := xe - xs;
  h := ye - ys;
  
  try
    Bmp := BitmapFromClient(xs,ys,xe,ye);
  except
    GetClientDimensions(w, h);
    srl_Warn('RadialRoadWalk', 'An error occured. ' + 'xs: ' + IntToStr(xs) +
      ', ys: ' + IntToStr(ys) + ', xe: ' + IntToStr(xe) + ', ye: ' + IntToStr(ye), warn_AllVersions);
    srl_Warn('RadialRoadWalk', 'Client area is 0, 0, ' + IntToStr(w) + ', ' +
      IntToStr(h), warn_AllVersions);
    //FreeBitmap(Bmp);
    Exit;
  end;

  for Y := 0 to (H-1) do
    for X := 0 to (W-1) do
    begin
      TC := FastGetPixel(Bmp, X, Y);
      if SimilarColors(TC, RoadColor, Tol) then
      begin
        RoadColor := TC;
        StoreToRoadColorArray;
        Result := True;
        FreeBitmap(Bmp);
        Exit;
      end
    end;
  FreeBitmap(Bmp);
end;

(*
RoadColorChecker
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function RoadColorChecker: Boolean;

Checks for presence of RoadColor. If none is found, it will try
various methods to find it. If successful, it sets RoadColor to the new color.

.. note::

    by Wizzup?/WT-Fakawi, edited by Ron & EvilChicken!

Example:

.. code-block:: pascal


*)

// TODO: Depreciated?
function RoadColorChecker: Boolean;
var
  I, X, Y: Integer;
begin
  Result := False;
  if (not LoggedIn) or (FindColor(X, Y, RoadColor, MMX1 + 20, MMY1 + 20, MMX2 - 20, MMY2 - 20)) then exit;

  for I := 0 to 2 do
  begin
    case I of
      0: if (FindColor(X, Y, 3026478, MMX1, MMY1, MMX2, MMY2)) then
           Result := GetNewRoadColor(X - 14, Y - 14, X + 14, Y + 14, 10);
      1: Result := (GetNewRoadColor(MMCX - 20, MMCY - 20, MMCX + 20, MMCY + 20, 10));
      2: Result := GetOldRoadColors;
    end;

    if (Result) then
    begin
      case I of
        0: srl_Warn('RoadColorChecker', 'Found RoadColor through flag: ' + IntToStr(RoadColor), warn_Debug);
        1: srl_Warn('RoadColorChecker', 'Found RoadColor through minimap: ' + IntToStr(RoadColor), warn_Debug);
        2: srl_Warn('RoadColorChecker', 'Found RoadColor through GetOldRoadColors: ' + IntToStr(RoadColor), warn_Debug);
      end;
      Exit;
    end else
      if (I = 2) then
        srl_Warn('RoadColorChecker', 'Couln''t find RoadColor', warn_Warning);
  end;
end;

(*
LinearWalkEx
~~~~~~~~~~~~

.. code-block:: pascal

    function LinearWalkEx(var TPA: TPointArray; cx, cy, TheColor, tol: Integer; Direction: Variant; Radius: Integer): Boolean;

Finds TheColor from Radial (scanning outwards) for Radius Distance.
Valid Arguments:

    - tpa.  Result points.
    - Direction. See `variantToDirection` for information
    - Radius.  Distance from the centre of minimap, i.e. how far away the mouse clicks. Use numbers 20-72


.. note::

    by Nielsie95

Example:

.. code-block:: pascal

    // check if the colour is present
    while (FindColor(x,y, RoadColor)) do
    begin
      // build a tpa to walk on
      if (LinearWalkEx(tpa, MMCX, MMCY, RoadColor, 5, -25.0, (MMX1-MMCX))) then
        WalkTPA(tpa);          // this depends how you want to work with the tpa
    end;

*)
function LinearWalkEx(var TPA: TPointArray; cx, cy, TheColor, tol: Integer; Direction: Variant; Radius: Integer): Boolean;
var
  time, SD, ED: Integer;
begin
  Result := False;
  if (not LoggedIn) then Exit;
  time := GetSystemTime;
  Direction := variantToDirection(Direction);

  if (Direction < 50) then
    SD := ((Direction + 360) - 50)
  else
    SD := (Direction - 50);
  ED := (Direction + 50);
  SD := Trunc(FixD(SD + 0.0));
  ED := Trunc(FixD(ED + 0.0));

  try
    FindColorsTolerance(tpa, TheColor, MMX1, MMY1, MMX2, MMY2, tol);
    FilterPointsPie(tpa, SD, ED, 10, Radius, cx, cy);
    LinearSort(tpa, cx, cy, Direction, False);
    Result := (Length(tpa) > 0);
  except
    srl_Warn('LinearWalkEx', 'LWex error!', warn_AllVersions);
    Exit;
  end;
  srl_Warn('LinearWalkEx', 'Took ' + IntToStr(GetSystemTime - time) + ' ms, found ' +
    IntToStr(Length(TPA)) + 'points.', warn_Debug);
end;

(*
RadialWalkEx
~~~~~~~~~~~~

.. code-block:: pascal

    function RadialWalkEx(var TPA: TPointArray; cx, cy, TheColor, tol: Integer; StartRadial, EndRadial: Variant; Radius: Integer): Boolean;

Finds TheColor from StartRadial to EndRadial for Radius Distance.
Valid Arguments:

    - tpa. Result points.
    - StartRadial/EndRadial. See `variantToDirection` for information
    - Radius. Distance from the centre of minimap, i.e. how far
      away the mouse clicks. Use numbers 20-72

.. note::

    by Nielsie95

Example:

.. code-block:: pascal

    // check if the colour is present
    while (FindColor(x,y, RoadColor)) do
    begin
      // build a tpa to walk on
      if (RadialWalkEx(tpa, MMCX, MMCY, RoadColor, 5, -25.0, (MMX1-MMCX))) then
        WalkTPA(tpa);          // this depends how you want to work with the tpa
    end;

*)
// TODO: Reorder params to clean up type changes?
function RadialWalkEx(var TPA: TPointArray; cx, cy, TheColor, tol: Integer; StartRadial, EndRadial: Variant; Radius: Integer): Boolean;
var
  time: Integer;
  SD, ED: extended;
begin
  Result := False;
  if (not LoggedIn) then Exit;

  SD := variantToDirection(StartRadial);
  ED := variantToDirection(EndRadial);
  if (SD = ED) then
  begin
    srl_Warn('RadialWalkEx', 'StartRadial = EndRadial, using LinearWalkEx.', warn_Warning);
    Result := LinearWalkEx(tpa, cx, cy, TheColor, tol, StartRadial, Radius);
  end;

  time := GetSystemTime;
  try
    FindColorsTolerance(tpa, TheColor, MMX1, MMY1, MMX2, MMY2, tol);
    FilterPointsPie(tpa, SD, ED, 10, Radius, cx, cy);
    SortCircleWise(tpa, cx, cy, StartRadial, False, StartRadial > EndRadial);
    Result := (Length(tpa) > 0);
  except
    srl_Warn('RadialWalkEx', 'An exception has occured', warn_AllVersions); Exit;
  end;
  srl_Warn('RadialWalkEx', 'Took ' + IntToStr(GetSystemTime - time) +
    ' ms, found' + IntToStr(Length(TPA)) + ' points', warn_Debug);
end;

(*
RadialWalk
~~~~~~~~~~

.. code-block:: pascal

    function RadialWalk(TheColor: Integer; StartRadial, EndRadial: Variant; Radius, Xmod, Ymod: Integer): Boolean;

Walks TheColor from StartRadial to EndRadial for Radius Distance
Valid Arguments:

    - TheColor. Any Color, but Road- or WaterColor will do fine :)
    - StartRadial/EndRadial. See `variantToDirection` for information
    - Radius. Distance from the centre of minimap, i.e. how far away the mouse clicks. Use numbers 20-72
    - XMod, YMod: deviation from MouseFindFlag. -2 to 2.


.. note::

    by Nielsie95 from an original idea by WT-Fakawi

Example:

.. code-block:: pascal

    while (RadialWalk(GetRoadColor, 'w', 'n', 50, -1, 2)) do
      WriteLn('Walking in a ''pie'' shape!');

*)
function RadialWalk(TheColor: Integer; StartRadial, EndRadial: Variant; Radius, Xmod, Ymod: Integer): Boolean;
var
  TPA: TPointArray;
  I: Integer;
begin
  Result := False;
  if RadialWalkEx(tpa, MMCX, MMCY, TheColor, 0, StartRadial, EndRadial, Radius) then
    for i := 0 to High(tpa) do
      if MFNF(tpa[i].x, tpa[i].y, Xmod, Ymod) then
      begin
        FFlag(10);
        Result := True;
        Exit;
      end;
end;

(*
LinearWalk
~~~~~~~~~~

.. code-block:: pascal

    function LinearWalk(TheColor: Integer; Direction: Variant; Radius, Xmod, Ymod: Integer): Boolean;

Walks TheColor from Direction MIDDLE OUT!by performing windscreenlike scanning movements for Radius Distance
Valid Arguments:

    - TheColor. Any Color, but Road- or WaterColor will do fine :)
    - Direction. See `variantToDirection` for information
    - Radius. Distance from the centre of minimap, i.e. how far away
      the mouse clicks. Use numbers 20-72.
    - *XMod*, *YMod*: deviation from MouseFindFlag. -2 to 2.

.. note::

    by Nielsie95 from another original idea by WT-Fakawi

Example:

.. code-block:: pascal

    while (LinearWalk(GetRoadColor, 25.5, 50, -1, 2)) do
      WriteLn('Walking in a ''line''!');

*)
function LinearWalk(TheColor: Integer; Direction: Variant; Radius, Xmod, Ymod: Integer): Boolean;
var
  TPA: TPointArray;
  I: Integer;
  
begin
  Result := False;
  if LinearWalkEx(tpa, MMCX, MMCY, TheColor, 0, Direction, Radius) then
    for i := 0 to High(tpa) do
      if MFNF(tpa[i].x, tpa[i].y, Xmod, Ymod) then
      begin
        FFlag(10);
        Result := True;
        Break;
      end;
end;

(*
LinearWalkTolerance
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function LinearWalkTolerance(TheColor: Integer; Direction: Variant; Radius, Xmod, Ymod, Tol : Integer): Boolean;

Same as LinearWalk, but with a tolerance.

.. note::

    by Nielsie95

Example:

.. code-block:: pascal

    while (LinearWalkTolerance(clRed, 25.5, 50, -1, 2, 5)) do
      WriteLn('Walking in a ''line''... with tolerance!');

*)
function LinearWalkTolerance(TheColor: Integer; Direction: Variant; Radius, Xmod, Ymod, Tol : Integer): Boolean;
var
  TPA: TPointArray;
  i, h: Integer;
begin
  Result := False;

  if LinearWalkEx(TPA, MMCX, MMCY, TheColor, Tol, Direction, Radius) then
  begin
    h := High(TPA);
    for i := 0 to h do
      if MFNF(TPA[i].x, TPA[i].y, XMod, YMod) then
      begin
        FFlag(10);
        Result := True;
        Exit;
      end;
  end;
end;

(*
RadialRoadWalk
~~~~~~~~~~~~~~

.. code-block:: pascal

    function RadialRoadWalk(TheColor, StartRadial, EndRadial, Radius, Xmod, Ymod: Integer): Boolean;

Walks TheColor from StartRadial to EndRadial for Radius Distance
Valid Arguments:

    - TheColor. RoadColor. RoadColor will be dynamically updated.
    - StartRadial/EndRadial. Any number between 0-720. 0=N,90=E,180=S,270=W.
    - Radius. Distance from the centre of minimap, i.e. how far away the mouse clicks. Use numbers 20-72
      XMod, YMod: deviation from MouseFindFlag. -2 to 2.


.. note::

    by  WT-Fakawi?

Example:

.. code-block:: pascal


*)

// TODO: Depreciated?
function RadialRoadWalk(TheColor, StartRadial, EndRadial, Radius, Xmod, Ymod: Integer): Boolean;
var
  tpa: TPointArray;
  i: Integer;
begin
  Result := False;
  if (not LoggedIn) then exit;
   if (RoadColorChecker) then
     srl_Warn('RadialRoadWalk', 'Updated RoadColor through RoadColorChecker: ' +
       IntToStr(RoadColor), warn_Debug);

    if RadialWalkEx(tpa, MMCX, MMCY, TheColor, 0, StartRadial, EndRadial, Radius) then
    for i := 0 to High(tpa) do
      if MFNF(tpa[i].x, tpa[i].y, Xmod, Ymod) then
      begin
        FlagEx(10, True);
        Result := True;
        Break;
      end;
  If Result then
    RoadColorChecker;
end;

(*
RadialWalkTolerance
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function RadialWalkTolerance(Color: Integer; sRadial, eRadial: Variant; r, modX, modY, Tol: Integer): Boolean;

Same as RadialWalk, but with a tolerance.

.. note::

    by Coh3n
    Last modified: Jan. 08, 2012 by Coh3n

Example:

.. code-block:: pascal

    while (RadialWalkTolerance(clRed, 25.5, 60.0, 50, -1, 2, 5)) do
      WriteLn('Walking in a ''line''... with tolerance!');

*)
function RadialWalkTolerance(Color: Integer; sRadial, eRadial: Variant; r, modX, modY, Tol: Integer): Boolean;
var
  TPA: TPointArray;
  i, h: Integer;
begin
  Result := False;

  if RadialWalkEx(TPA, MMCX, MMCY, Color, Tol, sRadial, eRadial, r) then
  begin
    h := High(TPA);
    for i := 0 to h do
      if MFNF(TPA[i].x, TPA[i].y, modX, modY) then
      begin
        Result := WaitFunc(@Flag, 50, 500);
        Exit;
      end;
  end;
end;

(*
RadialWalkAutoColor
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function RadialWalkAutoColor(autoColorConst, sRad, eRad, r, modX, modY: Integer): Boolean;

Uses the TAutoColorInfo record to radial walk.


.. note::

    by Coh3n

Example:

.. code-block:: pascal


*)
// TODO: Depreciated?
function RadialWalkAutoColor(autoColorConst, sRad, eRad, r, modX, modY: Integer): Boolean;
var
  acInfo: TAutoColorInfo;
  curCTS: Integer;
  hMod, sMod: Extended;
begin
  curCTS := GetColorToleranceSpeed;
  GetColorSpeed2Modifiers(hMod, sMod);

  acInfo := AutoColorEx(autoColorConst);
  with acInfo do
  begin
    ColorToleranceSpeed(2);
    SetColorSpeed2Modifiers(hueMod, satMod);

    result := RadialWalkTolerance(color, sRad, eRad, r, modX, modY, lumTol);
  end;

  SetColorSpeed2Modifiers(hMod, sMod);
  ColorToleranceSpeed(curCTS);
end;

(*
LinearRoadWalk
~~~~~~~~~~~~~~

.. code-block:: pascal

    function LinearRoadWalk(TheColor: Integer; Direction: Integer; Radius: Integer; Xmod, Ymod: Integer): Boolean;

Walks TheColor from Direction MIDDLE OUT!by performing windscreenlike scanning movements for Radius Distance
Valid Arguments:

    - TheColor. Any Color, but Road- or WaterColor will do fine :)
    - Direction. Any number between 0-720. 0=N,90=E,180=S,270=W.
    - Radius. Distance from the centre of minimap, i.e. how far away
      the mouse clicks. Use numbers 20-72
    - XMod, YMod: deviation from MouseFindFlag. -2 to 2.

.. note::

    by Nielsie95

Example:

.. code-block:: pascal


*)
// TODO: Depreciated?
function LinearRoadWalk(TheColor: Integer; Direction: Integer; Radius: Integer; Xmod, Ymod: Integer): Boolean;
var
  tpa: TPointArray;
  i: Integer;
begin
  Result := False;
  if (not LoggedIn) then exit;
   if (RoadColorChecker) then
     srl_Warn('LinearRoadWalk', 'Updated RoadColor through RoadColorChecker: ' +
       IntToStr(RoadColor), warn_Debug);
       
  if LinearWalkEx(tpa, MMCX, MMCY, TheColor, 0, Direction, Radius) then
    for i := 0 to High(tpa) do
      if MFNF(tpa[i].x, tpa[i].y, Xmod, Ymod) then
      begin
        FlagEx(10, True);
        Result := True;
        Break;
      end;
  if (Result) then
    RoadColorChecker;
end;

(*
WaterWalk
~~~~~~~~~

.. code-block:: pascal

    function WaterWalk(StartRadial, EndRadial, Radius, FFlagBreakOut, Xoff, Yoff, Xmod, Ymod: Integer): Boolean;

Walks alongside Water.
    - StartRadial/EndRadial = Any number between 0-720. 0=N,90=E,180=S,270=W.
    - Radius. Distance from the centre of minimap, i.e. how far away the mouse clicks. Use numbers 20-72
    - FFlagBreakOut. Distance to flag where it will break out. 15 - 10 is good.
    - Xoff, Yoff. Added to found point.
    - XMod, YMod. deviation from MouseFindFlag. -2 to 2.


.. note::

    by Nielsie95 from a third original idea by WT-Fakawi

Example:

.. code-block:: pascal


*)

// TODO: Depreciated?
function WaterWalk(StartRadial, EndRadial, Radius, FFlagBreakOut, Xoff, Yoff, Xmod, Ymod: Integer): Boolean;
var
  tpa: TPointArray;
  i: Integer;
begin
  Result := False;
  if RadialWalkEx(tpa, MMCX, MMCY, WaterColor, 0, StartRadial, EndRadial, Radius) then
    for i := 0 to High(tpa) do
      if MFNF(tpa[i].x + Xoff, tpa[i].y + Yoff, Xmod, Ymod) then
      begin
        FFLag(FFlagBreakOut);
        Result := True;
        Break;
      end;
end;

(*
TPAWalk
~~~~~~~

.. code-block:: pascal

    function TPAWalk(color, tol, offsetX, offsetY: integer; sortFrom: TPoint): boolean;

Uses a simple TPA sorting method to walk to a spot on the minimap.
    * color: the color to be found on the minimap
    * tol: the tolerance on color
    * offsetX: the offset to click on the X coordinate of the found color
    * offsetY: the offset to click on the Y coordinate of the found color
    * sortFrom: the point on the minimap to sort found colors from

.. note::

    by Coh3n

Example:

.. code-block:: pascal

  if (not TPAWalk(1234567, 10, 0, 0, point(MMX1, MMY1)) then
    if (not radialWalkTolerance({parameters here}) then
      writeln('failed to TPA and radial walk');
*)
function TPAWalk(color, tol, offsetX, offsetY: integer; sortFrom: TPoint): boolean;
var
  i, x, y: integer;
  TPA: TPointArray;
begin
  result := false;

  if (findColorsTolerance(TPA, color, MMX1, MMY1, MMX2, MMY2, tol)) then
  begin
    sortTPAFrom(TPA, sortFrom);

    for i := 0 to high(TPA) do
    begin
      x := TPA[i].x;
      y := TPA[i].y;

      if (not rs_OnMinimap(x, y)) then
        continue;

      mouse(x + offsetX, y + offsetY, 3, 3, mouse_left);

      if (waitFunc(@flag, 50, 3000)) then
      begin
        result := true;
        exit;
      end;
    end;
  end;
end;

(*
GetMiniMapDotsIn
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function GetMiniMapDotsIn(WhatDot: String; x1, y1, x2, y2: Integer): TPointArray;

Results the dots specified by WhatDot in x1, y1, x2, y2.
Usage:

    - 'npc', 'yellow' = Yellow Dot;
    - 'cape', 'blue' = Blue Dot;
    - 'item', 'red' = Red Dot;
    - 'player', 'white' = White Dot;
    - 'friend', 'green' = Green Dot;


.. note::

    by Nava2 and Rasta Magician

Example:

.. code-block:: pascal

    count := Length(GetMiniMapDotsIn('green', MMX1, MMY1, MMX2, MMY2)));
    WriteLn(ToStr(count) + ' friends on the map!');

*)

// TODO: Constants
{*******************************************************************************
function GetMiniMapDotsIn(WhatDot: String; x1, y1, x2, y2: Integer): TPointArray;
By: euphemism, mormonman
Description: Results the dots specified by WhatDot in the box x1, y1, x2, y2.
Usage : 'npc', 'yellow', 'n', 'y' : Yellow Dot;
        'cape', 'blue', 'team', 't', 'b' : Blue Dot;
        'item', 'red', 'i', 'r' : Red Dot;
        'player', 'white', 'p', 'w' : White Dot;
        'friend', 'green', 'f', 'g' : Green Dot;
*******************************************************************************}
function GetMiniMapDotsIn(WhatDot: String; x1, y1, x2, y2: Integer): TPointArray;
var
  I, Dif, Radius, Hi, C: Integer;
  TPA: TPointArray;
begin
  case LowerCase(WhatDot) of
    'npc', 'n', 'yellow', 'y': Dif := 4369;
    'item', 'i', 'red', 'r': Dif := 23;
    'player', 'p', 'white', 'w': Dif := 1907997;
    'friend', 'f', 'green', 'g': Dif := 5376;
    'team', 't', 'blue', 'b', 'cape': Dif := 2171941;
    {'clan', 'c', 'orange', 'o': Dif := -1;}
  else
    srl_Warn('GetMiniMapDotsIn', '"' + WhatDot + '" is not a valid dot type', warn_AllVersions);
  end;
  Freeze;
  Radius := Max((x2-x1)div 2, (y2-y1)div 2);
  FindColorsPie(TPA, 65536, 0, 0, 360, 0, radius, x1, y1, x2, y2, (x1+x2)div 2, (y1+y2)div 2);
  Hi := High(TPA);
  SetLength(Result, Hi + 1);
  if (Hi < 0) then
  begin
    UnFreeze;
    Exit;
  end;
  C := 0;
  for I := 0 to Hi do
  begin
    if (GetColor(TPA[I].X-1, TPA[I].Y-1) - GetColor(TPA[I].X, TPA[I].Y-1) = Dif) then
    begin
      Result[C] := Point(TPA[I].x, TPA[i].y - 2);
      Inc(C);
    end;
  end;
  Unfreeze;
  SetLength(Result, C);
end;

(*
GetMMDotsOnMS
~~~~~~~~~~~

.. code-block:: pascal

    Function GetMMDotsOnMS(WhatDot: String): TPointArray;

Using minimap gets all MM dots assumed to be on Main Screen and returns it as
a TPA.  You can also use it like Length(GetMMDotsOnMS(WhatDot)) to count how
many are actually visable. Returns closes to your position first.  Used with
MMtoMS can be very powerful for searching more precise locations.

.. note::

    by Narcle

Example:

.. code-block:: pascal

   while (Length(GetMMDotsOnMS('npc')) < 1) and (GetSystemTime < TimeCheck) do
   begin
     Wait(100);
     FindNormalRandoms;
   end;

*)
Function GetMMDotsOnMS(WhatDot: String): TPointArray;
var
  i, L, c: integer;
  Dots: TPointArray;
  B: TBox;
begin
  B := IntToBox(32, 23, 24, 17);//Xtop, Ytop, Xbot, Ybot
  Dots := GetMiniMapDotsIn(WhatDot, MMCX-Round(B.x1*1.3), MMCY-Round(B.y1*1.3),
                                    MMCX+Round(B.x2*1.3), MMCY+Round(B.y2*1.3));
  L := Length(Dots);
  if (L > 0) then
  begin
    SetLength(Result, L);
    for i := 0 to High(Dots) do
    If InAbstractBox(MMCX-B.x1, MMCY-B.y1, MMCX+B.x1, MMCY-B.y1, MMCX+B.x2,
                     MMCY+B.y2, MMCX-B.x2, MMCY+B.y2, Dots[i].x, Dots[i].y) then
    begin
      Result[c] := Dots[i];
      Inc(c);
    end;
    SetLength(Result, c);
    SortTPAFrom(Result, Point(MMCX, MMCY));
  end;
end;

(*
GetMiniMapDots
~~~~~~~~~~~~~~

.. code-block:: pascal

    function GetMiniMapDots(WhatDot: String): TPointArray;

Results the dots specified by WhatDot on the Minimap. See `GetMiniMapDotsIn`
for more information.


.. note::

    by Nava2

Example:

.. code-block:: pascal

    // print the minimap positions on the debug canvas
    DebugTPA(GetMiniMapDots('white'));

*)
function GetMiniMapDots(WhatDot: String): TPointArray;
begin
  Result := GetMinimapDotsIn(WhatDot, MMX1, MMY1, MMX2, MMY2);
end;

(*
CountDots
~~~~~~~~~

.. code-block:: pascal

    function CountDots(WhatDot: String): integer;

Counts the occurance of WhatDot on the MiniMap. See `GetMiniMapDots` in
for more information.


.. note::

    by Nava2

Example:

.. code-block:: pascal

    WriteLn(ToStr(CountDots('yellow')) + ' NPCs present on Minimap.');

*)
function CountDots(WhatDot: String): integer;
begin
  Result := Length(GetMinimapDots(WhatDot));
end;

(*
MouseMM
~~~~~~~

.. code-block:: pascal

    procedure MouseMM(x, y, randX, randY: Integer);

Clicks (x, y) on the MM, taking Map Angle into Account. Be sure to choose the
coords when Map Angle = 0 !

.. note::

    by mixster

Example:

.. code-block:: pascal

    northPoint := Point(MMCX, MMY1-5); // North part!
    MouseMM(NorthPoint.x, NorthPoint.y, 4, 4); //

*)
procedure MouseMM(x, y, randX, randY: Integer);
var
  p: TPoint;
begin
  if not rs_OnMinimap(x, y) then
    exit;

  p := RotatePoint(Point(x, y), rs_GetCompassAngleRadians, MMCX, MMCY);
  Mouse(p.x, p.y, randX, randY, mouse_left);
end;

(*
LodestoneScreen
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function BankScreen: Boolean;

Finds LodestoneScreen. Returns true if Found.

.. note::

    Author: Home

Example:

.. code-block:: pascal

    If LodestoneScreen then
      WriteLn('Lodestone Network screen is open!');
*)
function LodestoneScreen: Boolean;
begin
  Result := CountColor(12378347, 172, 26, 345, 42) > 500;
end;


(*
LodestoneTeleport
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function LodestoneTeleport(Where: String): Boolean;

Teleports you to chosen location via Lodestone teleport.

.. note::

    Author: Home

Example:

.. code-block:: pascal

    If CastHomeTeleport then
      Lodestoneteleport('Lumbridge');
*)
function LodestoneTeleport(Where: String): Boolean;
var
  TPA: TPointArray;
  TSA: TStringArray;
  CTS, I: Integer;
begin
  If not LoggedIn then Exit;
  If not LodestoneScreen then Exit;

  CTS := GetColorToleranceSpeed;
  ColorToleranceSpeed(1);

  TSA := ['Lunar Isle', 'Yanille', 'Ardougne', 'Seers Village', 'Catherby', 'Taverley',
          'Burthorpe', 'Edgeville', 'Falador', 'Port Sarim', 'Draynor Village', 'Lumbridge',
          'Varrock', 'Al Kharid', 'Bandit Camp'];

  TPA := [Point(45, 78), Point(160, 262), Point(167, 211), Point(192, 158), Point(223, 181),
          Point(253, 180), Point(251, 145), Point(293, 160), Point(278, 206), Point(276, 249), Point(308, 211),
          Point(327, 243), Point(345, 182), Point(362, 229), Point(326, 297)];

  for I := 0 to 14 do
    if Capitalize(Where) = TSA[I] then
    begin
      MMouse(TPA[I].X, TPA[I].Y, 2, 2);

      if (WaitUptextMulti(['Teleport', 'ele', 'ort', 'lepo', 'epor'], 400)) then
      begin
        ClickMouse2(Mouse_Left);
        Result := true;
      end;
    end;

  ColorToleranceSpeed(CTS);
end;
